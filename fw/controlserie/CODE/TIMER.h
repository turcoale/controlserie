/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : TIMER.H
**     Project   : controlserie
**     Processor : MC9S08SH8CPJ
**     Component : FreeCntr
**     Version   : Component 01.112, Driver 01.09, CPU db: 3.00.062
**     Compiler  : CodeWarrior HCS08 C Compiler
**     Date/Time : 12/15/2015, 2:57 AM
**     Abstract  :
**         This device "FreeCntr" implements a free running counter for
**         time measurement.
**     Settings  :
**         Timer name                  : RTC (8-bit)
**         Compare name                : RTCmod
**         Counter shared              : No
**
**         High speed mode
**             Prescaler               : divide-by-1
**             Clock                   : 244 Hz
**           Period
**             Xtal ticks              : 31232
**             microseconds            : 999424
**             milliseconds            : 999
**             seconds                 : 1
**             seconds (real)          : 0.999424
**             Hz                      : 1
**           Frequency of counting (Bus clock / prescaler)
**             Hz                      : 244
**
**         Initialization:
**              Timer                  : Enabled
**
**         Timer registers
**              Counter                : RTCCNT    [$006D]
**              Mode                   : RTCSC     [$006C]
**              Run                    : RTCSC     [$006C]
**              Prescaler              : RTCSC     [$006C]
**              Compare                : RTCMOD    [$006E]
**
**         User handling procedure     : not specified
**     Contents  :
**         Reset           - byte TIMER_Reset(void);
**         GetCounterValue - byte TIMER_GetCounterValue(TIMER_TTimerValue *Value);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __TIMER
#define __TIMER

/* MODULE TIMER. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "Cpu.h"

/* PUBLISHED CONSTANTS */
#define TIMER_COUNTER_INPUT_CLOCK_HZ  0xF4UL /* Initial counter input clock frequency [Hz] */
#define TIMER_PERIOD_VALUE            0xF4UL /* Initial period value in ticks of the timer */
#define TIMER_PRESCALER_VALUE           0x80U /* Prescaler value of the timer in high speed mode */
#define TIMER_TIMER_INPUT_CLOCK         0x7A12UL /* Deprecated, Initial timer input clock value [Hz] */
#define TIMER_UP_COUNTER                1 /* The timer counts upwards */
#define TIMER_RESET_ON_COMPARE          1 /* Property "Reset on compare" selected */
/* High speed mode constants */
#define TIMER_COUNTER_INPUT_CLOCK_HZ_HIGH 0xF4UL /* Counter input clock frequency in high speed mode [Hz] */
#define TIMER_PERIOD_VALUE_HIGH       0xF4UL /* Period value in ticks of the timer in high speed mode */
#define TIMER_PRESCALER_VALUE_HIGH      0x80U /* Prescaler value of the timer in high speed mode */
#define TIMER_TIMER_INPUT_CLOCK_HIGH    0x7A12UL /* Deprecated, Initial timer input clock value [Hz] */

typedef byte TIMER_TTimerValue;        /* Counter or compare value, width depends on timer width */

#define TIMER_Reset() ( \
  RTCMOD = RTCMOD,                     /* Reset HW Counter */ \
  (byte)ERR_OK                         /* Return result */ \
)
/*
** ===================================================================
**     Method      :  TIMER_Reset (component FreeCntr)
**
**     Description :
**         This method resets the timer-counter (sets to zero for
**         up-counting HW or to appropriate value for down-counting HW).
**         The method is available only if the counter register can be
**         set by software and the counter is not shared.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define TIMER_GetCounterValue(Value) ( \
  *(Value) = RTCCNT,                   /* Set the flag "events disabled" */ \
  (byte)ERR_OK                         /* Return result */ \
)
/*
** ===================================================================
**     Method      :  TIMER_GetCounterValue (component FreeCntr)
**
**     Description :
**         This method returns a content of counter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Value           - A pointer to the returned 8-bit value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

void TIMER_Init(void);
/*
** ===================================================================
**     Method      :  TIMER_Init (component FreeCntr)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean internal 
**         variables. The method is called automatically as a part of the 
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END TIMER. */

#endif /* ifndef __TIMER */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.07 [04.34]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/
