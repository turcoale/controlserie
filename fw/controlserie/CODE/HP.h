/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : HP.H
**     Project   : controlserie
**     Processor : MC9S08SH8CPJ
**     Component : Capture
**     Version   : Component 02.211, Driver 01.27, CPU db: 3.00.062
**     Compiler  : CodeWarrior HCS08 C Compiler
**     Date/Time : 12/15/2015, 6:40 AM
**     Abstract  :
**         This bean "Capture" simply implements the capture function
**         of timer. The counter counts the same way as in free run mode. On
**         the selected edge of the input signal (on the input pin), the current
**         content of the counter register is written into the capture
**         register and the OnCapture event is called.
**     Settings  :
**             Timer capture encapsulation : Capture
**
**         Timer
**             Timer                   : TPM2
**             Counter shared          : Yes
**
**         High speed mode
**             Prescaler               : divide-by-64
**           Maximal time for capture register
**             Xtal ticks              : 32768
**             microseconds            : 1048576
**             milliseconds            : 1049
**             seconds                 : 1
**             seconds (real)          : 1.048576
**             Hz                      : 1
**           One tick of timer is
**             microseconds            : 16
**
**         Initialization:
**              Timer                  : Enabled
**              Events                 : Enabled
**
**         Timer registers
**              Capture                : TPM2C1V   [$0069]
**              Counter                : TPM2CNT   [$0061]
**              Mode                   : TPM2SC    [$0060]
**              Run                    : TPM2SC    [$0060]
**              Prescaler              : TPM2SC    [$0060]
**
**         Used input pin              : 
**             ----------------------------------------------------
**                Number (on package)  |    Name
**             ----------------------------------------------------
**                       8             |  PTB4_TPM2CH1_MISO
**             ----------------------------------------------------
**
**         Port name                   : PTB
**         Bit number (in port)        : 4
**         Bit mask of the port        : $0010
**
**         Signal edge/level           : rising
**         Priority                    : 
**         Pull option                 : off
**
**     Contents  :
**         Reset           - byte HP_Reset(void);
**         GetCaptureValue - byte HP_GetCaptureValue(HP_TCapturedValue *Value);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __HP
#define __HP

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* MODULE HP. */

#include "Cpu.h"

/* PUBLISHED CONSTANTS */
#define HP_PRESCALER_VALUE           0x40U /* Prescaler value of the timer in high speed mode */
#define HP_COUNTER_INPUT_CLOCK_HZ    0xF424LU /* Initial counter input clock frequency [Hz] */
#define HP_TIMER_INPUT_CLOCK         0x003D0900LU /* Deprecated, Initial timer input clock frequency [Hz] */
#define HP_PRESCALER_VALUE_HIGH      0x40U /* Prescaler value of the timer in high speed mode */
#define HP_COUNTER_INPUT_CLOCK_HZ_HIGH 0xF424LU /* Counter input clock frequency in high speed mode [Hz] */
#define HP_TIMER_INPUT_CLOCK_HIGH    0x003D0900LU /* Deprecated, Timer input clock frequency in high speed mode[Hz] */

#ifndef __BWUserType_HP_TCapturedValue
#define __BWUserType_HP_TCapturedValue
  #define HP_TCapturedValue word       /* Type of the captured value */
#endif


extern volatile word HP_CntrState;     /* Content of counter */


#define HP_Reset() \
  (HP_CntrState = TPM2CNT , (byte)ERR_OK)
/*
** ===================================================================
**     Method      :  HP_Reset (component Capture)
**
**     Description :
**         This method resets the counter register (see implementation
**         note in <General Info>).
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define HP_GetCaptureValue(Value) \
  (*(HP_TCapturedValue*)(Value) = (HP_TCapturedValue)(TPM2C1V - HP_CntrState), (byte)ERR_OK)
/*
** ===================================================================
**     Method      :  HP_GetCaptureValue (component Capture)
**
**     Description :
**         This method gets the last value captured by enabled timer.
**         Note: one tick of timer is
**               16 us in high speed mode
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Value           - A pointer to the content of the
**                           capture register
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

void HP_Init(void);
/*
** ===================================================================
**     Method      :  HP_Init (component Capture)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean internal 
**         variables. The method is called automatically as a part of the 
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void HP_Interrupt(void);
/*
** ===================================================================
**     Method      :  Interrupt (component Capture)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes of the bean event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END HP. */

#endif /* ifndef __HP */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.07 [04.34]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/
